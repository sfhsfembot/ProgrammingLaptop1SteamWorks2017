// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc692.ProgrammingLaptop1Steamworks2017;

//import edu.wpi.cscore.UsbCamera;
//import edu.wpi.cscore.VideoSink;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc692.ProgrammingLaptop1Steamworks2017.commands.*;
import org.usfirst.frc692.ProgrammingLaptop1Steamworks2017.subsystems.*;


//import com.ni.vision.NIVision;
//import com.ni.vision.NIVision.Image;
//import com.ni.vision.NIVision.DrawMode;
//import com.ni.vision.NIVision.ShapeMode;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	public static int currSession;
	public static int sessionfront;
	public static int sessionback;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static DumpTruck dumpTruck;
    public static GearPiston gearPiston;
    public static Pneumatics pneumatics;
    public static Climber climber;
    public static PowerDis powerDis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        dumpTruck = new DumpTruck();
        gearPiston = new GearPiston();
        pneumatics = new Pneumatics();
        climber = new Climber();
        powerDis = new PowerDis();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
//		UsbCamera cam = CameraServer.getInstance().startAutomaticCapture(0);
//		CameraServer.getInstance().getServer().setSource(cam);
		CameraServer.getInstance().startAutomaticCapture();
		
		
		// CameraServer camera = CameraServer.getInstance();
		//
		// camera.startAutomaticCapture("");

		// new Thread(() -> {
		// UsbCamera camera =
		// CameraServer.getInstance().startAutomaticCapture();
		// camera.setResolution(640, 480);
		//
		// CvSink cvSink = CameraServer.getInstance().getVideo();
		// CvSource outputStream = CameraServer.getInstance().putVideo("Blur",
		// 640, 480);
		//
		// Mat source = new Mat();
		// Mat output = new Mat();
		//
		// while(!Thread.interrupted()) {
		// cvSink.grabFrame(source);
		// Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
		// outputStream.putFrame(output);
		// }
		// }).start();
		// frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB,0);
		// sessionfront = NIVision.IMAQdxOpenCamera("cam0",
		// NIVision.IMAQdxCameraControlMode.CameraControlModeController);
		// sessionback = NIVision.IMAQdxOpenCamera("cam1",
		// NIVision.IMAQdxCameraControlMode.CameraControlModeController);
		// currSession = sessionfront;
		// NIVision.IMAQdxConfigureGrab(currSession);
		//
		// SmartDashboard.putInt("Robot.init entered, current session value
		// equals", sessionfront);
		// Robot.pneumatics.compressorOneStart();
	}

	public void operatorControl() {
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
//		UsbCamera cam = CameraServer.getInstance().startAutomaticCapture(0);
//		CameraServer.getInstance().getServer().setSource(cam);
	//	server.setSource(cam1);
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
